---
# playbook.yml

# 0. Bootstrap Python2 (để Ansible yum module chạy được)
- name: Bootstrap Python2 on all app hosts
  hosts: bastion,appserver
  gather_facts: false
  tasks:
    - name: Install python2
      raw: sudo yum install -y python2
    - name: Symlink /usr/bin/python → python2
      raw: sudo ln -sf /usr/bin/python2 /usr/bin/python
    - name: Reset connection so Ansible re-detects Python
      meta: reset_connection

# 1. Cài Git & rsync
- name: Install Git & rsync
  hosts: bastion,appserver
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python
  tasks:
    - name: Ensure git and rsync are present
      yum:
        name:
          - git
          - rsync
        state: present

# 2. Cài Node.js 16 qua NodeSource (hỗ trợ serve + backend)
- name: Install Node.js 16.x on all app hosts
  hosts: bastion,appserver
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python
  tasks:
    - name: Remove any pre-installed nodejs
      yum:
        name: nodejs
        state: absent

    - name: Add NodeSource repo for Node.js 16.x
      shell: curl -fsSL https://rpm.nodesource.com/setup_16.x | bash -
      args:
        creates: /etc/yum.repos.d/nodesource-16.x.repo

    - name: Install Node.js 16
      yum:
        name: nodejs
        state: present

    - name: Verify Node.js version
      command: node -v
      register: node_version

    - name: Show Node.js version
      debug:
        var: node_version.stdout

# 3. Triển khai static HTML frontend trên bastion bằng serve
- name: Deploy static HTML frontend on bastion
  hosts: bastion
  become: true
  vars:
    frontend_dir: /home/ec2-user/frontend_html
    backend_host: "{{ hostvars['appserver'].ansible_host }}:3001"
  tasks:
    - name: Create frontend_dir
      file:
        path: "{{ frontend_dir }}"
        state: directory
        owner: ec2-user
        mode: '0755'

    - name: Deploy index.html
      copy:
        dest: "{{ frontend_dir }}/index.html"
        content: |
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <title>Counter App</title>
          </head>
          <body>
            <h1>Counter</h1>
            <div id="count">0</div>
            <button id="btn">Increment</button>
            <script>
              const api = 'http://{{ backend_host }}';
              async function load() {
                const r = await fetch(api + '/api/count');
                const j = await r.json();
                document.getElementById('count').innerText = j.count;
              }
              document.getElementById('btn').onclick = async () => {
                const r = await fetch(api + '/api/increment', { method:'POST' });
                const j = await r.json();
                document.getElementById('count').innerText = j.count;
              };
              load();
            </script>
          </body>
          </html>
        owner: ec2-user
        mode: '0644'

    - name: Install serve globally
      npm:
        name: serve
        global: yes

    - name: Kill existing serve processes (ignore if none)
      shell: pkill -f "serve -s {{ frontend_dir }}" || true
      ignore_errors: true

    - name: Start serve static on port 80
      shell: |
        cd "{{ frontend_dir }}"
        nohup serve -s . -l 80 > serve.log 2>&1 &
      args:
        chdir: "{{ frontend_dir }}"
      become_user: ec2-user

# 4. Triển khai Backend trên appserver (qua bastion proxy)
- name: Deploy Backend on appserver
  hosts: appserver
  become: true
  vars:
    repo_url: "https://github.com/buiduyhung22103/nextjs-ci-cd.git"
    repo_dest: "/home/ec2-user/repo"
    backend_path: "{{ repo_dest }}/counter-app/backend"
  tasks:
    - name: Remove old backend repo if exists
      file:
        path: "{{ repo_dest }}"
        state: absent

    - name: Clone monorepo into backend
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dest }}"
        version: main
      become_user: ec2-user

    - name: Create .env for Backend
      copy:
        dest: "{{ backend_path }}/.env"
        content: |
          DB_HOST={{ rds_endpoint }}
          DB_NAME={{ db_name }}
          DB_USER={{ db_user }}
          DB_PASS={{ db_pass }}
          PORT=3001
        owner: ec2-user
        mode: '0600'

    - name: Install Backend dependencies
      shell: |
        cd "{{ backend_path }}"
        npm install
      args:
        chdir: "{{ backend_path }}"

    - name: Kill existing backend processes (ignore if none)
      shell: pkill -f "node index.js" || true
      ignore_errors: true

    - name: Start Backend service
      shell: |
        cd "{{ backend_path }}"
        nohup node index.js > backend.log 2>&1 &
      args:
        chdir: "{{ backend_path }}"
      become_user: ec2-user
